// Инициализация при загрузке DOM
document.addEventListener('DOMContentLoaded', function() {
    initCustomCursor();
    initScrollHeader();
    initMobileMenu();
    // initTokenomicsChart(); // Больше не нужно, так как используем изображение
    initCopyAddressButton();
    initContractCopy(); // Новая функция для копирования адреса контракта
    initModalHandlers();
    initAnimations();
    initScrollAnimations();
});

// Изменение стиля хедера при скролле
function initScrollHeader() {
    const header = document.querySelector('.header');
    if (!header) return;
    
    window.addEventListener('scroll', () => {
        if (window.scrollY > 100) {
            header.classList.add('scrolled');
        } else {
            header.classList.remove('scrolled');
        }
    });
}

// Мобильное меню
function initMobileMenu() {
    const menuToggle = document.querySelector('.mobile-menu-toggle');
    const mainNav = document.querySelector('.main-nav');
    
    if (!menuToggle || !mainNav) return;
    
    menuToggle.addEventListener('click', () => {
        menuToggle.classList.toggle('active');
        mainNav.classList.toggle('active');
    });
}

// Диаграмма токеномики
function initTokenomicsChart() {
    const ctx = document.getElementById('tokenomicsChart');
    if (!ctx) return;
    
    new Chart(ctx, {
        type: 'doughnut',
        data: {
            labels: ['Ликвидность', 'Маркетинг', 'Разработка', 'Команда', 'Экосистема'],
            datasets: [{
                data: [30, 10, 35, 10, 15],
                backgroundColor: [
                    'rgba(0, 229, 255, 0.8)',
                    'rgba(0, 229, 255, 0.6)',
                    'rgba(0, 229, 255, 0.4)',
                    'rgba(0, 229, 255, 0.3)',
                    'rgba(0, 229, 255, 0.2)'
                ],
                borderColor: 'rgba(0, 229, 255, 0.1)',
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            cutout: '70%',
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    backgroundColor: 'rgba(19, 27, 46, 0.9)',
                    titleColor: '#ffffff',
                    bodyColor: '#ffffff',
                    bodyFont: {
                        family: 'Poppins'
                    },
                    displayColors: false,
                    callbacks: {
                        label: function(context) {
                            return context.label + ': ' + context.raw + '%';
                        }
                    }
                }
            }
        }
    });
}

// Копирование адреса контракта в баннере
function initContractCopy() {
    const copyButton = document.getElementById('copy-contract');
    const contractAddress = document.getElementById('contract-address');
    const copyMessage = document.getElementById('copy-message');
    
    if (!copyButton || !contractAddress) return;
    
    copyButton.addEventListener('click', () => {
        const textToCopy = contractAddress.textContent;
        navigator.clipboard.writeText(textToCopy).then(() => {
            // Успешно скопировано
            copyButton.innerHTML = '<i class="fas fa-check"></i>';
            copyButton.style.background = '#18ffff';
            copyMessage.classList.add('visible');
            
            // Вернуть оригинальную иконку через 2 секунды
            setTimeout(() => {
                copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                copyButton.style.background = '';
                copyMessage.classList.remove('visible');
            }, 2000);
        }).catch(err => {
            console.error('Ошибка копирования: ', err);
        });
    });
}

// Копирование адреса контракта
function initCopyAddressButton() {
    const copyButton = document.getElementById('copy-address');
    const contractText = document.getElementById('contract-text');
    
    if (!copyButton || !contractText) return;
    
    copyButton.addEventListener('click', () => {
        const textToCopy = contractText.textContent;
        navigator.clipboard.writeText(textToCopy).then(() => {
            // Успешно скопировано
            copyButton.innerHTML = '<i class="fas fa-check"></i>';
            copyButton.style.color = '#43cea2';
            
            // Вернуть оригинальную иконку через 2 секунды
            setTimeout(() => {
                copyButton.innerHTML = '<i class="fas fa-copy"></i>';
                copyButton.style.color = '';
            }, 2000);
        }).catch(err => {
            console.error('Ошибка копирования: ', err);
        });
    });
}

// Обработчики модальных окон
function initModalHandlers() {
    const whitePaperBtn = document.getElementById('whitepaper-btn');
    const whitePaperModal = document.getElementById('whitepaper-modal');
    const closeModal = document.querySelector('.close-modal');
    
    if (!whitePaperBtn || !whitePaperModal || !closeModal) return;
    
    whitePaperBtn.addEventListener('click', (e) => {
        e.preventDefault();
        whitePaperModal.style.display = 'flex';
        setTimeout(() => {
            whitePaperModal.classList.add('active');
        }, 10);
    });
    
    closeModal.addEventListener('click', () => {
        whitePaperModal.classList.remove('active');
        setTimeout(() => {
            whitePaperModal.style.display = 'none';
        }, 300);
    });
    
    window.addEventListener('click', (e) => {
        if (e.target === whitePaperModal) {
            whitePaperModal.classList.remove('active');
            setTimeout(() => {
                whitePaperModal.style.display = 'none';
            }, 300);
        }
    });
}

// Инициализация кастомного курсора
function initCustomCursor() {
    const cursor = document.querySelector('.cursor');
    const cursorDot = document.querySelector('.cursor-dot');
    
    if (!cursor || !cursorDot) return;
    
    const moveCursor = (e) => {
        cursor.style.left = e.clientX + 'px';
        cursor.style.top = e.clientY + 'px';
        
        cursorDot.style.left = e.clientX + 'px';
        cursorDot.style.top = e.clientY + 'px';
    };
    
    window.addEventListener('mousemove', moveCursor);
    
    // Эффект при клике
    document.addEventListener('mousedown', () => {
        cursor.style.transform = 'translate(-50%, -50%) scale(0.8)';
        cursorDot.style.transform = 'translate(-50%, -50%) scale(0.7)';
    });
    
    document.addEventListener('mouseup', () => {
        cursor.style.transform = 'translate(-50%, -50%) scale(1)';
        cursorDot.style.transform = 'translate(-50%, -50%) scale(1)';
    });
    
    // Эффект при наведении на ссылки и кнопки
    const links = document.querySelectorAll('a, button, .btn, .feature-card, .social-link');
    
    links.forEach(link => {
        link.addEventListener('mouseenter', () => {
            cursor.classList.add('cursor-grow');
            cursorDot.classList.add('cursor-dot-grow');
        });
        
        link.addEventListener('mouseleave', () => {
            cursor.classList.remove('cursor-grow');
            cursorDot.classList.remove('cursor-dot-grow');
        });
    });
    
    // Показываем курсор только при движении мыши
    document.addEventListener('mouseenter', () => {
        cursor.style.opacity = '1';
        cursorDot.style.opacity = '1';
    });
    
    document.addEventListener('mouseleave', () => {
        cursor.style.opacity = '0';
        cursorDot.style.opacity = '0';
    });
    
    document.addEventListener('mouseover', () => {
        cursor.style.opacity = '1';
        cursorDot.style.opacity = '1';
    });
}

// Инициализация анимаций
function initAnimations() {
    // Анимации при скролле
    const animatedElements = document.querySelectorAll('.fade-in, .fade-up, .fade-right');
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('visible');
            }
        });
    }, { threshold: 0.1 });
    
    animatedElements.forEach(el => observer.observe(el));
    
    // Элементы для анимации
    const elementsToAnimate = document.querySelectorAll('.feature-card, .step-card, .roadmap-content, .tokenomics-item');
    
    elementsToAnimate.forEach(element => {
        observer.observe(element);
    });
}

// Инициализация анимаций при прокрутке с затемнением
function initScrollAnimations() {
    const sections = document.querySelectorAll('.section');
    const overlay = document.querySelector('.section-overlay');
    let lastScrollTop = 0;
    let isScrolling = false;
    let ticking = false;
    
    // Анимируем секции при загрузке
    setTimeout(() => {
        sections.forEach(section => {
            if (isElementInViewport(section)) {
                section.classList.add('visible');
            }
        });
    }, 300);
    
    // Проверяем видимость секций при прокрутке
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                // Сначала затемняем
                if (isScrolling && !ticking) {
                    ticking = true;
                    overlay.classList.add('active');
                    
                    // Через короткое время показываем секцию и убираем затемнение
                    setTimeout(() => {
                        entry.target.classList.add('visible');
                        setTimeout(() => {
                            overlay.classList.remove('active');
                            ticking = false;
                        }, 300);
                    }, 200);
                } else {
                    entry.target.classList.add('visible');
                }
            }
        });
    }, { threshold: 0.2 });
    
    sections.forEach(section => observer.observe(section));
    
    // Обрабатываем событие прокрутки
    window.addEventListener('scroll', () => {
        const st = window.scrollY;
        
        // Определяем, что пользователь активно прокручивает
        if (Math.abs(st - lastScrollTop) > 30) {
            isScrolling = true;
            clearTimeout(window.scrollTimeout);
            
            window.scrollTimeout = setTimeout(() => {
                isScrolling = false;
            }, 100);
        }
        
        lastScrollTop = st;
    });
}

// Проверка, находится ли элемент в видимой области
function isElementInViewport(el) {
    const rect = el.getBoundingClientRect();
    return (
        rect.top >= 0 &&
        rect.left >= 0 &&
        rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
        rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
}
